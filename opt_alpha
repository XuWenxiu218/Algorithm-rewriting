import numpy
import pprint
import cts
import math
from math import isnan
import id2word
from scipy.special import polygamma
from scipy.special import gammaln, psi,polygamma
from gensim import interfaces, utils, matutils, _matutils
import pandas as pd
from compute_likelihood import compute_likelihood
from  doc_e_step import doc_e_step
from gensim.matutils import (
    kullback_leibler, hellinger, jaccard_distance, jensen_shannon,
    dirichlet_expectation, logsumexp, mean_absolute_difference
)
def alhood(a,ss,D,K):

    L2 = D*(gammaln(K*a) - K * gammaln(a))
    L1= (a - 1) * ss
    #print(L1+L2)
    return L1+L2

def d_alhood(a,ss,D,K):
    #print('d_alhood',a)
    L4 =ss+D * (K * psi(K * a) - K * psi(a))
    return L4
def d2_alhood(a,ss,D,K):
    L = D * (K * K * polygamma(1,K*a) - K * polygamma(1,a))
    return L

def opt_alpha(ss,D,K):
    init_a=10
    log_a=numpy.log(init_a)
    a = numpy.exp(log_a)
    for i in range(20):
        print('a',a)
        if isnan(a):
            #print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
            init_a=init_a*10
            a=init_a
            log_a=numpy.log(a)
        f=alhood(a,ss,D,K)
        df=d_alhood(a,ss,D,K)
        print('df',df)
        #print('a', a)
        d2f=d2_alhood(a,ss,D,K)
        fenmu=df/(d2f*a+df)
        log_a_new=log_a-fenmu
        a_converged=(log_a-log_a_new)/log_a
        log_a = log_a_new
        if math.fabs(df)<1e-1:
            print('迭代后的值小于1e-5了！', df, '此时迭代了', i, '次')
            break
        a=numpy.exp(log_a_new)
    print('经过200次迭代，似然函数不收敛','df是：',df,'a是：',a)
    return a



